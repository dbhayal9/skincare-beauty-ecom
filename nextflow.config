process {
    //container = 'rgenxtools:latest' //when used docker command (nextflow script inside then // container)
    // when use nextflow script outside docker then defined container = 'rgenxtools:latest'
    executor = 'local'
    errorStrategy = 'ignore'
  
    withName: 'quality_check' {
        cpus = 4         // Customize for specific processes
        memory = '10 GB'
    }
    withName: 'trim_paired' {
        cpus = 4
        memory = '10 GB'
    }
    withName: 'trim_single' {
        cpus = 4
        memory = '10 GB'
    }
    withName: 'align_paired' {
        cpus = 8
        memory = '10 GB'
    }
    withName: 'align_single' {
        cpus = 20
        memory = '10 GB'
    }
    withName: 'markDup' {
        cpus = 4
        memory = '10 GB'
    }
    withName: 'mdBAM_index' {
        cpus = 2
        memory = '10 GB'
    }
    withName: 'somVarCall' {
        cpus = 4 
        memory = '10 GB'
    }
    withName: 'FilterMT' {
        cpus = 4
        memory = '2 GB'
    }

    withName: 'KeepPASS' {
        cpus = 5
        memory = '2 GB'
    }

}

docker {
    enabled = true
       
}

trace {
    overwrite = true
}
report {
    overwrite = true
}
timeline {
    overwrite = true
}
dag {
    overwrite = true
}

// worked with resumeNF.sh to resume proccess
import groovy.json.JsonSlurper

// Define the path to config.json (mounted inside the Docker container)
def paramsFilePath = '/usr/src/app/config.json'

// Use JsonSlurper to parse the JSON file
def jsonSlurper = new JsonSlurper()
def configFile = new File(paramsFilePath)

// Check if the config file exists, then load its content
if (configFile.exists()) {
    def configParams = jsonSlurper.parse(configFile)
    params << configParams // Merge the parsed JSON parameters into params
}

/*
import groovy.json.JsonSlurper

// Define the path to config.json (mounted inside the Docker container)
def paramsFilePath = '/app/config.json'

// Use JsonSlurper to parse the JSON file
def jsonSlurper = new JsonSlurper()
def configFile = new File(paramsFilePath)

// Check if the config file exists, then load its content
if (configFile.exists()) {
    def configParams = jsonSlurper.parse(configFile)
    params << configParams // Merge the parsed JSON parameters into params
}

// Handle resume mode based on the config.json content
if (params.resume) {
    nextflow.enable.resume = true
}
*/